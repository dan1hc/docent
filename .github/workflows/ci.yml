name: ci

on: [push]

env:
  PY_VERSIONS: "[\"3.12\",\"3.11\",\"3.10\",\"3.9\"]"
permissions: write-all

jobs:
  setup:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.setVariables.outputs.python-versions }}
    steps:
      - id: setVariables
        run: |
          echo "python-versions=${{ toJson(env.PY_VERSIONS) }}" >> $GITHUB_OUTPUT
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: build distribution
        if: ${{ matrix.python-version != fromJson(env.PY_VERSIONS)[0] || github.ref != 'refs/heads/main' }}
        run: |
          python -m pip install --upgrade pip
          pip wheel . -w dist
      - name: build distribution [docs]
        if: ${{ matrix.python-version == fromJson(env.PY_VERSIONS)[0] && github.ref == 'refs/heads/main' }}
        run: |
          python -m pip install --upgrade pip
          pip wheel ".[docs]" -w dist
      - name: upload distribution
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.python-version }}
          path: dist
  test:
    needs: [setup, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: download dist
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/
      - name: setup dependencies
        if: ${{ matrix.python-version != fromJson(env.PY_VERSIONS)[0] || github.ref != 'refs/heads/main' }}
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install --no-index --find-links dist/ docent
      - name: setup dependencies [docs]
        if: ${{ matrix.python-version == fromJson(env.PY_VERSIONS)[0] && github.ref == 'refs/heads/main' }}
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install --no-index --find-links dist/ docent[docs]
      - name: pytest
        run: pytest -v tests --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      - name: upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}
  document:
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJson(env.PY_VERSIONS)[0] }}
      - name: download dist
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ fromJson(env.PY_VERSIONS)[0] }}
          path: dist/
      - name: setup dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-index --find-links dist/ docent[docs]
      - name: documentation build
        run: |
          docent-document docent -a daniel.dube
          mv docs _site
      - name: setup pages
        uses: actions/configure-pages@v4
      - name: upload pages
        uses: actions/upload-pages-artifact@v2
      - name: deploy pages
        id: deployment
        uses: actions/deploy-pages@v3
  publish:
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: pypi
      url: https://pypi.org/p/docent
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: download dist
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ fromJson(env.PY_VERSIONS)[1] }}
          path: dist/
      - name: publish pypi
        uses: pypa/gh-action-pypi-publish@release/v1
